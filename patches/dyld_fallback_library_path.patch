--- GalSim/SConstruct	2016-03-29 14:42:32.000000000 -0700
+++ GalSim/SConstruct	2016-04-09 04:43:01.000000000 -0700
@@ -107,6 +107,13 @@
          'this option enables SCons to set it back in for you by doing '+
          '`scons DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH`.',
          '', PathVariable.PathAccept))
+opts.Add(PathVariable('DYLD_FALLBACK_LIBRARY_PATH',
+         'Set the DYLD_FALLBACK_LIBRARY_PATH inside of SCons.  '+
+         'Particularly useful on El Capitan (and later), since Apple strips out '+
+         'DYLD_FALLBACK_LIBRARY_PATH from the environment that SCons sees, so if you need it, '+
+         'this option enables SCons to set it back in for you by doing '+
+         '`scons DYLD_FALLBACK_LIBRARY_PATH=$DYLD_FALLBACK_LIBRARY_PATH`.',
+         '', PathVariable.PathAccept))
 opts.Add('NOSETESTS','Name of nosetests executable','')
 opts.Add(BoolVariable('CACHE_LIB','Cache the results of the library checks',True))
 opts.Add(BoolVariable('WITH_PROF',
@@ -691,6 +698,11 @@
         paths=paths.split(os.pathsep)
         AddPath(lib_paths, paths)
 
+    if env['IMPORT_PATHS'] and os.environ.has_key('DYLD_FALLBACK_LIBRARY_PATH'):
+        paths=os.environ['DYLD_FALLBACK_LIBRARY_PATH']
+        paths=paths.split(os.pathsep)
+        AddPath(lib_paths, paths)
+
     env.PrependENVPath('PATH', bin_paths)
     env.Prepend(LIBPATH= lib_paths)
     env.Prepend(CPPPATH= cpp_paths)
@@ -714,12 +726,11 @@
 
     env is the relevant SCons environment.
     """
-    if 'DYLD_LIBRARY_PATH' in env and env['DYLD_LIBRARY_PATH'] != '':
-        pre = 'DYLD_LIBRARY_PATH=%r'%env['DYLD_LIBRARY_PATH']
-        pname = "%s %s"%(pre,pname)
-    if 'LD_LIBRARY_PATH' in env and env['LD_LIBRARY_PATH'] != '':
-        pre = 'LD_LIBRARY_PATH=%r'%env['LD_LIBRARY_PATH']
-        pname = "%s %s"%(pre,pname)
+    for var in ['DYLD_LIBRARY_PATH', 'DYLD_FALLBACK_LIBRARY_PATH', 'LD_LIBRARY_PATH']:
+        if var in env and env[var] != '':
+            pre = '%s=%r'%(var,env[var])
+            pname = "%s %s"%(pre,pname)
+
     return pname
 
 def AltTryRun(config, text, extension):
