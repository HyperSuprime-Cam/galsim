diff --git a/SConstruct.orig b/SConstruct
index 2538aba..357b954 100644
--- a/SConstruct.orig
+++ b/SConstruct
@@ -1,3 +1,4 @@
+from __future__ import print_function
 # vim: set filetype=python et ts=4 sw=4:
 
 # Copyright (c) 2012-2016 by the GalSim developers team on GitHub
@@ -26,9 +27,9 @@ import distutils.sysconfig
 
 from sys import stdout,stderr
 
-print 'SCons is version',SCons.__version__,'using python version',platform.python_version()
+print('SCons is version',SCons.__version__,'using python version',platform.python_version())
 
-print "Python is from", distutils.sysconfig.get_python_inc()
+print("Python is from", distutils.sysconfig.get_python_inc())
 
 # Require SCons version >= 1.1
 # (This is the earliest version I could find to test on.  Probably works with 1.0.)
@@ -166,7 +167,7 @@ def ClearCache():
         shutil.rmtree(".sconf_temp")
 
 def GetMacVersion():
-    print 'Mac version is',platform.mac_ver()[0]
+    print('Mac version is',platform.mac_ver()[0])
     ver = platform.mac_ver()[0].split('.')
     if len(ver) >= 2:
         return ver[:2]
@@ -186,12 +187,12 @@ def ErrorExit(*args, **kwargs):
 
     import shutil
 
-    out = open("gs.error","wb")
+    out = open("gs.error","w")
 
     # Start with the error message to output both to the screen and to the end of gs.error:
-    print
+    print()
     for s in args:
-        print s
+        print(s)
         out.write(s + '\n')
     out.write('\n')
 
@@ -215,7 +216,7 @@ def ErrorExit(*args, **kwargs):
     # Next put the full config.log in there.
     out.write('The full config.log file is:\n')
     out.write('==================\n')
-    shutil.copyfileobj(open("config.log","rb"),out)
+    shutil.copyfileobj(open("config.log","r"),out)
     out.write('==================\n\n')
 
     # It is sometimes helpful to see the output of the scons executables.
@@ -225,7 +226,7 @@ def ErrorExit(*args, **kwargs):
         cmd = ("ls -d .sconf_temp/conftest* | grep -v '\.out' | grep -v '\.cpp' "+
                "| grep -v '\.o' | grep -v '\_mod'")
         p = subprocess.Popen([cmd],stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
-        conftest_list = p.stdout.readlines()
+        conftest_list = [l.decode() for l in p.stdout.readlines()]
         for conftest in conftest_list:
             conftest = conftest.strip()
             if os.access(conftest, os.X_OK):
@@ -235,7 +236,7 @@ def ErrorExit(*args, **kwargs):
             cmd = PrependLibraryPaths(cmd,env)
             p = subprocess.Popen(['bash','-c',cmd], stdout=subprocess.PIPE,
                                  stderr=subprocess.STDOUT, shell=False)
-            conftest_out = p.stdout.readlines()
+            conftest_out = [l.decode() for l in p.stdout.readlines()]
             out.write('Output of the command %s is:\n'%cmd)
             out.write(''.join(conftest_out) + '\n')
 
@@ -248,7 +249,7 @@ def ErrorExit(*args, **kwargs):
                     cmd = 'ldd ' + conftest
                 p = subprocess.Popen([cmd], stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                                      shell=True)
-                otool_out = p.stdout.readlines()
+                otool_out = [l.decode() for l in p.stdout.readlines()]
                 out.write('Output of the command %s is:\n'%cmd)
                 out.write(''.join(otool_out) + '\n')
     except:
@@ -260,22 +261,22 @@ def ErrorExit(*args, **kwargs):
         import platform
         major, minor = GetMacVersion()
         if int(major) > 10 or int(minor) >= 11:
-            print
-            print 'Starting with El Capitan (OSX 10.11), Apple instituted a new policy called'
-            print '"System Integrity Protection" (SIP) where they strip "dangerous" environment'
-            print 'variables from system calls (including SCons).  So if your system is using'
-            print 'DYLD_LIBRARY_PATH for run-time library resolution, then SCons cannot see it'
-            print 'so that may be why this is failing.  cf. Issues #721 and #725.'
-            print 'You should try executing:'
-            print
-            print '    scons DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH'
-
-    print
-    print 'Please fix the above error(s) and rerun scons.'
-    print 'Note: you may want to look through the file INSTALL.md for advice.'
-    print 'Also, if you are having trouble, please check the INSTALL FAQ at '
-    print '   https://github.com/GalSim-developers/GalSim/wiki/Installation%20FAQ'
-    print
+            print()
+            print('Starting with El Capitan (OSX 10.11), Apple instituted a new policy called')
+            print('"System Integrity Protection" (SIP) where they strip "dangerous" environment')
+            print('variables from system calls (including SCons).  So if your system is using')
+            print('DYLD_LIBRARY_PATH for run-time library resolution, then SCons cannot see it')
+            print('so that may be why this is failing.  cf. Issues #721 and #725.')
+            print('You should try executing:')
+            print()
+            print('    scons DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH')
+
+    print()
+    print('Please fix the above error(s) and rerun scons.')
+    print('Note: you may want to look through the file INSTALL.md for advice.')
+    print('Also, if you are having trouble, please check the INSTALL FAQ at ')
+    print('   https://github.com/GalSim-developers/GalSim/wiki/Installation%20FAQ')
+    print()
     Exit(1)
 
 
@@ -362,7 +363,7 @@ def BasicCCFlags(env):
                 env.Append(CCFLAGS=['/W2','/WX'])
 
         else:
-            print '\nWARNING: Unknown compiler.  You should set FLAGS directly.\n'
+            print('\nWARNING: Unknown compiler.  You should set FLAGS directly.\n')
             env.Replace(CCFLAGS=[])
 
     else :
@@ -401,7 +402,7 @@ def AddOpenMPFlag(env):
     version = env['CXXVERSION_NUMERICAL']
     if compiler == 'g++':
         if version < openmp_mingcc_vers:
-            print 'No OpenMP support for g++ versions before ',openmp_mingcc_vers
+            print('No OpenMP support for g++ versions before ',openmp_mingcc_vers)
             env['WITH_OPENMP'] = False
             return
         flag = ['-fopenmp']
@@ -415,12 +416,12 @@ def AddOpenMPFlag(env):
             xlib += ['gcc_eh']
         env.Append(CCFLAGS=['-fopenmp'])
     elif compiler == 'clang++':
-        print 'No OpenMP support for clang++'
+        print('No OpenMP support for clang++')
         env['WITH_OPENMP'] = False
         return
     elif compiler == 'icpc':
         if version < openmp_minicpc_vers:
-            print 'No OpenMP support for icpc versions before ',openmp_minicpc_vers
+            print('No OpenMP support for icpc versions before ',openmp_minicpc_vers)
             env['WITH_OPENMP'] = False
             return
         flag = ['-openmp']
@@ -429,7 +430,7 @@ def AddOpenMPFlag(env):
         env.Append(CCFLAGS=['-openmp'])
     elif compiler == 'pgCC':
         if version < openmp_minpgcc_vers:
-            print 'No OpenMP support for pgCC versions before ',openmp_minpgcc_vers
+            print('No OpenMP support for pgCC versions before ',openmp_minpgcc_vers)
             env['WITH_OPENMP'] = False
             return
         flag = ['-mp','--exceptions']
@@ -445,16 +446,16 @@ def AddOpenMPFlag(env):
         # I believe the Professional edition has full OpenMP support,
         # so if you have that, the above lines might work for you.
         # Just uncomment those, and commend the below three lines.
-        print 'No OpenMP support for cl'
+        print('No OpenMP support for cl')
         env['WITH_OPENMP'] = False
         return
     else:
-        print '\nWARNING: No OpenMP support for compiler ',compiler,'\n'
+        print('\nWARNING: No OpenMP support for compiler ',compiler,'\n')
         env['WITH_OPENMP'] = False
         return
 
     #print 'Adding openmp support:',flag
-    print 'Using OpenMP'
+    print('Using OpenMP')
     env.AppendUnique(LINKFLAGS=ldflag)
     env.AppendUnique(LIBS=xlib)
 
@@ -488,7 +489,7 @@ def GetCompilerVersion(env):
     if compiler is None:
         ErrorExit('Specified compiler not found in path: %s' % env['CXX'])
 
-    print 'Using compiler:',compiler
+    print('Using compiler:',compiler)
 
     compiler_real = os.path.realpath(compiler)
     compiler_base = os.path.basename(compiler)
@@ -532,12 +533,12 @@ def GetCompilerVersion(env):
         cmd = compiler + ' ' + versionflag + ' 2>&1'
         import subprocess
         p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
-        lines = p.stdout.readlines()
+        lines = [l.decode() for l in p.stdout.readlines()]
 
         # Check if g++ is a symlink for something else:
         if compilertype is 'g++':
             if 'clang' in lines[0]:
-                print 'Detected clang++ masquerading as g++'
+                print('Detected clang++ masquerading as g++')
                 compilertype = 'clang++'
                 # When it is masquerading, the line with the version is the second line.
                 linenum=1
@@ -545,13 +546,13 @@ def GetCompilerVersion(env):
         # Check if c++ is a symlink for something else:
         if compilertype is 'c++':
             if 'clang' in lines[0]:
-                print 'Detected clang++ masquerading as c++'
+                print('Detected clang++ masquerading as c++')
                 compilertype = 'clang++'
             elif 'g++' in lines[0] or 'gcc' in lines[0]:
-                print 'Detected g++ masquerading as c++'
+                print('Detected g++ masquerading as c++')
                 compilertype = 'g++'
             else:
-                print 'Cannot determine what kind of compiler c++ really is'
+                print('Cannot determine what kind of compiler c++ really is')
                 compilertype = 'unknown'
             # Any others I should look for?
 
@@ -570,7 +571,7 @@ def GetCompilerVersion(env):
             version = 0
             vnum = 0
 
-    print 'compiler version:',version
+    print('compiler version:',version)
 
     env['CXXTYPE'] = compilertype
     env['CXXVERSION'] = version
@@ -582,9 +583,9 @@ def GetNosetestsVersion(env):
     import subprocess
     cmd = env['NOSETESTS'] + ' --version 2>&1'
     p = subprocess.Popen([cmd],stdout=subprocess.PIPE,shell=True)
-    line = p.stdout.readlines()[0]
+    line = p.stdout.readlines()[0].decode()
     version = line.split()[2]
-    print 'nosetests version:',version
+    print('nosetests version:',version)
     env['NOSETESTSVERSION'] = version
 
 
@@ -631,7 +632,7 @@ def AddDepPaths(bin_paths,cpp_paths,lib_paths):
         tdir = FindPathInEnv(env, dirtag)
         if tdir is None:
             if env[dirtag] != '':
-                print 'WARNING: could not find specified %s = %s'%(dirtag,env[dirtag])
+                print('WARNING: could not find specified %s = %s'%(dirtag,env[dirtag]))
             continue
 
         AddPath(bin_paths, os.path.join(tdir, 'bin'))
@@ -700,32 +701,32 @@ def AddExtraPaths(env):
             AddPath(cpp_paths, os.path.join(env['PREFIX'], 'include'))
 
     # Paths found in environment paths
-    if env['IMPORT_PATHS'] and os.environ.has_key('PATH'):
+    if env['IMPORT_PATHS'] and 'PATH' in os.environ:
         paths=os.environ['PATH']
         paths=paths.split(os.pathsep)
         AddPath(bin_paths, paths)
 
-    if env['IMPORT_PATHS'] and os.environ.has_key('C_INCLUDE_PATH'):
+    if env['IMPORT_PATHS'] and 'C_INCLUDE_PATH' in os.environ:
         paths=os.environ['C_INCLUDE_PATH']
         paths=paths.split(os.pathsep)
         AddPath(cpp_paths, paths)
 
-    if env['IMPORT_PATHS'] and os.environ.has_key('LIBRARY_PATH'):
+    if env['IMPORT_PATHS'] and 'LIBRARY_PATH' in os.environ:
         paths=os.environ['LIBRARY_PATH']
         paths=paths.split(os.pathsep)
         AddPath(lib_paths, paths)
 
-    if env['IMPORT_PATHS'] and os.environ.has_key('LD_LIBRARY_PATH'):
+    if env['IMPORT_PATHS'] and 'LD_LIBRARY_PATH' in os.environ:
         paths=os.environ['LD_LIBRARY_PATH']
         paths=paths.split(os.pathsep)
         AddPath(lib_paths, paths)
 
-    if env['IMPORT_PATHS'] and os.environ.has_key('DYLD_LIBRARY_PATH'):
+    if env['IMPORT_PATHS'] and 'DYLD_LIBRARY_PATH' in os.environ:
         paths=os.environ['DYLD_LIBRARY_PATH']
         paths=paths.split(os.pathsep)
         AddPath(lib_paths, paths)
 
-    if env['IMPORT_PATHS'] and os.environ.has_key('DYLD_FALLBACK_LIBRARY_PATH'):
+    if env['IMPORT_PATHS'] and 'DYLD_FALLBACK_LIBRARY_PATH' in os.environ:
         paths=os.environ['DYLD_FALLBACK_LIBRARY_PATH']
         paths=paths.split(os.pathsep)
         AddPath(lib_paths, paths)
@@ -743,7 +744,7 @@ def ReadFileList(fname):
     try:
         files=open(fname).read().split()
     except:
-        print 'Could not open file:',fname
+        print('Could not open file:',fname)
         sys.exit(45)
     files = [f.strip() for f in files]
     return files
@@ -792,7 +793,7 @@ def AltTryRun(config, text, extension):
         ok = sconf.BuildNodes(node) 
     if ok:
         # For successful execution, also return the output contents
-        outputStr = output.get_contents()
+        outputStr = output.get_text_contents()
         return 1, outputStr.strip()
     else:
         return 0, ""
@@ -944,6 +945,7 @@ int main()
     result = (
         CheckLibsFull(config,[''],fftw_source_file) or
         CheckLibsFull(config,['fftw3'],fftw_source_file) )
+
     if not result:
         ErrorExit(
             'Error: fftw file failed to link correctly',
@@ -976,8 +978,8 @@ int main() { std::cout<<BOOST_VERSION<<std::endl; return 0; }
 """
     ok, boost_version = AltTryRun(config,boost_version_file,'.cpp')
     boost_version = int(boost_version.strip())
-    print 'Boost version is %d.%d.%d' % (
-            boost_version / 100000, boost_version / 100 % 1000, boost_version % 100)
+    print('Boost version is %d.%d.%d' % (
+            boost_version / 100000, boost_version / 100 % 1000, boost_version % 100))
     
     return 1
 
@@ -997,7 +999,7 @@ int main()
   return 0;
 }
 """
-    print 'Checking for correct TMV linkage... (this may take a little while)'
+    print('Checking for correct TMV linkage... (this may take a little while)')
     config.Message('Checking for correct TMV linkage... ')
 
     result = config.TryCompile(tmv_source_file,'.cpp')
@@ -1057,7 +1059,7 @@ def TryScript(config,text,pname):
 
     if ok:
         # For successful execution, also return the output contents
-        outputStr = output.get_contents()
+        outputStr = output.get_text_contents()
         return 1, outputStr.strip()
     else:
         return 0, ""
@@ -1225,7 +1227,7 @@ PyMODINIT_FUNC initcheck_python(void)
         config.Result(1)
         py_version = GetPythonVersion(config)
         config.env['PYTHON_VERSION'] = py_version
-        print 'Building for python version '+py_version
+        print('Building for python version '+py_version)
         return 1
 
     # Other times (e.g. most Mac systems) we'll need to link the library.
@@ -1266,7 +1268,7 @@ PyMODINIT_FUNC initcheck_python(void)
         if result:
             config.env['PYTHON_VERSION'] = py_version
             config.Result(1)
-            print 'Building for python version '+py_version
+            print('Building for python version '+py_version)
             return 1
 
     # If that didn't work, we'll need to add a directory to LIBPATH.  So let's see if we
@@ -1323,9 +1325,9 @@ PyMODINIT_FUNC initcheck_python(void)
                 if CheckModuleLibs(config,py_lib,python_source_file,'check_python'):
                     config.env['PYTHON_VERSION'] = py_version
                     config.Result(1)
-                    print 'Building for python version '+py_version
-                    print 'Python libdir = ',py_libdir
-                    print 'Python libfile = ',py_libfile
+                    print('Building for python version '+py_version)
+                    print('Python libdir = ',py_libdir)
+                    print('Python libfile = ',py_libfile)
                     return 1
 
     # Oh well, it was worth a shot.
@@ -1603,13 +1605,13 @@ except:
     config.Result(result)
 
     if not result:
-        print """
+        print("""
 WARNING: There seems to be a mismatch between this C++ compiler and the one
          that was used to build either python or boost.python (or both).
          This might be ok, but if you get a linking error in the subsequent 
          build, it is possible  that you will need to rebuild boost with the
          same compiler (and sometimes version) that you are using here.
-"""
+""")
         config.env['final_messages'].append("""
 WARNING: There seems to be a mismatch between this C++ compiler and the one
          that was used to build either python or boost.python (or both).
@@ -1736,22 +1738,22 @@ int main()
 { std::cout<<tmv::TMV_Version()<<std::endl; return 0; }
 """
     ok, tmv_version = AltTryRun(config,tmv_version_file,'.cpp')
-    print 'TMV version is '+tmv_version.strip()
+    print('TMV version is '+tmv_version.strip())
 
     compiler = config.env['CXXTYPE']
     version = config.env['CXXVERSION_NUMERICAL']
 
-    if not config.env.has_key('LIBS') :
+    if 'LIBS' not in config.env :
         config.env['LIBS'] = []
 
     tmv_link_file = FindTmvLinkFile(config)
 
-    print 'Using TMV_LINK file:',tmv_link_file
+    print('Using TMV_LINK file:',tmv_link_file)
     try:
         tmv_link = open(tmv_link_file).read().strip()
     except:
         ErrorExit('Could not open TMV link file: ',tmv_link_file)
-    print '    ',tmv_link
+    print('    ',tmv_link)
 
     if sys.platform.find('darwin') != -1:
         # The Mac BLAS library is notoriously sketchy.  In particular, we have discovered that it
@@ -1763,34 +1765,34 @@ int main()
         major, minor = GetMacVersion()
         try:
             p = subprocess.Popen(['xcodebuild','-version'], stdout=subprocess.PIPE)
-            xcode_version = p.stdout.readlines()[0].split()[1]
-            print 'XCode version is',xcode_version
+            xcode_version = p.stdout.readlines()[0].decode().split()[1]
+            print('XCode version is',xcode_version)
         except:
             # Don't require the user to have xcode installed.
             xcode_version = None
-            print 'Unable to determine XCode version'
+            print('Unable to determine XCode version')
         if ((int(major) > 10 or int(minor) >= 7) and '-latlas' not in tmv_link and
                 ('-lblas' in tmv_link or '-lcblas' in tmv_link)):
-            print 'WARNING: The Apple BLAS library has been found not to be thread safe on'
-            print '         Mac OS versions 10.7+, even across multiple processes (i.e. not'
-            print '         just multiple threads in the same process.)  The symptom is that'
-            print '         `scons tests` may hang when running nosetests using multiple'
-            print '         processes.'
+            print('WARNING: The Apple BLAS library has been found not to be thread safe on')
+            print('         Mac OS versions 10.7+, even across multiple processes (i.e. not')
+            print('         just multiple threads in the same process.)  The symptom is that')
+            print('         `scons tests` may hang when running nosetests using multiple')
+            print('         processes.')
             if xcode_version is None:
                 # If we couldn't run xcodebuild, then don't give any more information about this.
                 pass
             elif xcode_version < '5.1':
-                print '         This seems to have been partially fixed with XCode 5.1, so we'
-                print '         recommend upgrading to the latest XCode version.  However, even'
-                print '         with 5.1, some systems still seem to have problems.'
+                print('         This seems to have been partially fixed with XCode 5.1, so we')
+                print('         recommend upgrading to the latest XCode version.  However, even')
+                print('         with 5.1, some systems still seem to have problems.')
                 env['BAD_BLAS'] = True
             else:
-                print '         This seems to have been partially fixed with XCode 5.1, so there'
-                print '         is a good chance you will not have any problems.  But there are'
-                print '         still occasional systems that fail when using multithreading with'
-                print '         programs or modules that link to the BLAS library (such as GalSim).'
-                print '         If you do have problems, the solution is to recompile TMV with'
-                print '         the SCons option "WITH_BLAS=false".'
+                print('         This seems to have been partially fixed with XCode 5.1, so there')
+                print('         is a good chance you will not have any problems.  But there are')
+                print('         still occasional systems that fail when using multithreading with')
+                print('         programs or modules that link to the BLAS library (such as GalSim).')
+                print('         If you do have problems, the solution is to recompile TMV with')
+                print('         the SCons option "WITH_BLAS=false".')
 
     # ParseFlags doesn't know about -fopenmp being a LINKFLAG, so it
     # puts it into CCFLAGS instead.  Move it over to LINKFLAGS before
@@ -1826,7 +1828,7 @@ def GetNCPU():
     """
     # Linux, Unix and MacOS:
     if hasattr(os, 'sysconf'):
-        if os.sysconf_names.has_key('SC_NPROCESSORS_ONLN'):
+        if 'SC_NPROCESSORS_ONLN' in os.sysconf_names:
             # Linux & Unix:
             ncpus = os.sysconf('SC_NPROCESSORS_ONLN')
             if isinstance(ncpus, int) and ncpus > 0:
@@ -1836,7 +1838,7 @@ def GetNCPU():
             p = subprocess.Popen(['sysctl','-n','hw.ncpu'],stdout=subprocess.PIPE,shell=True)
             return int(p.stdout.read().strip())
     # Windows:
-    if os.environ.has_key('NUMBER_OF_PROCESSORS'):
+    if 'NUMBER_OF_PROCESSORS' in os.environ:
         ncpus = int(os.environ['NUMBER_OF_PROCESSORS'])
         if ncpus > 0:
             return ncpus
@@ -1856,11 +1858,11 @@ def DoConfig(env):
 
     # If not explicit, set number of jobs according to number of CPUs
     if env.GetOption('num_jobs') != 1:
-        print "Using specified number of jobs =",env.GetOption('num_jobs')
+        print("Using specified number of jobs =",env.GetOption('num_jobs'))
     else:
         env.SetOption('num_jobs', GetNCPU())
         if env.GetOption('num_jobs') != 1:
-            print "Determined that a good number of jobs =",env.GetOption('num_jobs')
+            print("Determined that a good number of jobs =",env.GetOption('num_jobs'))
 
     # The basic flags for this compiler if not explicitly specified
     BasicCCFlags(env)
@@ -1868,14 +1870,14 @@ def DoConfig(env):
     # Some extra flags depending on the options:
     #if env['WITH_OPENMP']:
     if False:  # We don't use OpenMP anywhere, so don't bother with this.
-        print 'Using OpenMP'
+        print('Using OpenMP')
         AddOpenMPFlag(env)
     if not env['DEBUG']:
-        print 'Debugging turned off'
+        print('Debugging turned off')
         env.AppendUnique(CPPDEFINES=['NDEBUG'])
     else:
         if env['TMV_DEBUG']:
-            print 'TMV Extra Debugging turned on'
+            print('TMV Extra Debugging turned on')
             env.AppendUnique(CPPDEFINES=['TMV_EXTRA_DEBUG'])
 
     import SCons.SConf
@@ -1934,9 +1936,9 @@ def BuildExecutableScript(target, source, env):
     for i in range(len(source)):
         f = open(str(target[i]), "w")
         f.write( '#!' + env['PYTHON'] + '\n' )
-        f.write(source[i].get_contents())
+        f.write(source[i].get_text_contents())
         f.close()
-        os.chmod(str(target[i]),0775)
+        os.chmod(str(target[i]),0o775)
 
 
 #
@@ -1953,21 +1955,21 @@ if env['IMPORT_ENV']:
 # Check for unknown variables in case something is misspelled
 unknown = opts.UnknownVariables()
 if unknown and not env['USE_UNKNOWN_VARS']:
-    print 'Unknown variables:', unknown.keys()
-    print 'If you are sure these are right (e.g. you want to set some SCons parameters'
-    print 'that are not in the list of GalSim parameters given by scons -h)'
-    print 'then you can override this check with USE_UNKNOWN_VARS=true'
+    print('Unknown variables:', unknown.keys())
+    print('If you are sure these are right (e.g. you want to set some SCons parameters')
+    print('that are not in the list of GalSim parameters given by scons -h)')
+    print('then you can override this check with USE_UNKNOWN_VARS=true')
     ErrorExit()
 
 if any(opt.default != env[opt.key] for opt in opts.options):
-    print 'Using the following (non-default) scons options:'
+    print('Using the following (non-default) scons options:')
     for opt in opts.options:
         if (opt.default != env[opt.key]):
-            print '   %s = %s'%(opt.key,env[opt.key])
-    print 'These can be edited directly in the file %s.'%config_file
-    print 'Type scons -h for a full list of available options.'
+            print('   %s = %s'%(opt.key,env[opt.key]))
+    print('These can be edited directly in the file %s.'%config_file)
+    print('Type scons -h for a full list of available options.')
 else:
-    print 'Using the default scons options'
+    print('Using the default scons options')
 
 opts.Save(config_file,env)
 Help(opts.GenerateHelpText(env))
@@ -1996,7 +1998,7 @@ if not GetOption('help'):
         python = which(python)
         if python == None:
             ErrorExit('Specified python not found in path: %s' % env['PYTHON'])
-    print 'Using python = ',python
+    print('Using python = ',python)
     env['PYTHON'] = python
 
     # Set PYPREFIX if not given:
@@ -2007,16 +2009,16 @@ if not GetOption('help'):
             cmd = "%s -c \"import distutils.sysconfig; "%(python)
             cmd += "print(distutils.sysconfig.get_python_lib(prefix='%s'))\""%(env['PREFIX'])
             p = subprocess.Popen([cmd],stdout=subprocess.PIPE,shell=True)
-            env['PYPREFIX'] = p.stdout.read().strip()
-            print 'Using PYPREFIX generated from PREFIX = ',env['PYPREFIX']
+            env['PYPREFIX'] = p.stdout.read().decode().strip()
+            print('Using PYPREFIX generated from PREFIX = ',env['PYPREFIX'])
         else:
             # On Macs, the regular python lib is usually writable, so it works fine for
             # installing the python modules.
             cmd = "%s -c \"import distutils.sysconfig; "%(python)
             cmd += "print(distutils.sysconfig.get_python_lib())\""
             p = subprocess.Popen([cmd],stdout=subprocess.PIPE,shell=True)
-            env['PYPREFIX'] = p.stdout.read().strip()
-            print 'Using default PYPREFIX = ',env['PYPREFIX']
+            env['PYPREFIX'] = p.stdout.read().decode().strip()
+            print('Using default PYPREFIX = ',env['PYPREFIX'])
 
     # Set up the configuration
     DoConfig(env)
@@ -2058,8 +2060,8 @@ if not GetOption('help'):
     # Print out anything we've put into the final_messages list.
     def FinalMessages(target, source, env):
         for msg in env['final_messages']:
-            print
-            print msg
+            print()
+            print(msg)
 
     env['BUILDERS']['FinalMessages'] = Builder(action = FinalMessages)
     final = env.FinalMessages(target='#/final', source=None)
